Grammar

    0 $accept: program $end

    1 program: CLASS IDENTIFIER O_CUR_BRACE field_decls method_decls C_CUR_BRACE
    2        | CLASS IDENTIFIER O_CUR_BRACE field_decls C_CUR_BRACE
    3        | CLASS IDENTIFIER O_CUR_BRACE method_decls C_CUR_BRACE
    4        | CLASS IDENTIFIER O_CUR_BRACE C_CUR_BRACE

    5 field_decls: field_decls field_decl
    6            | field_decl

    7 method_decls: method_decls method_decl
    8             | method_decl

    9 field_decl: type id_all_list SEMICOLON

   10 id_all_list: id_all_list COMMA IDENTIFIER
   11            | id_all_list COMMA id_array
   12            | IDENTIFIER
   13            | id_array

   14 id_array: IDENTIFIER O_BRACE INT_LITERAL C_BRACE

   15 method_decl: type IDENTIFIER O_PAREN method_id_list C_PAREN block
   16            | VOID IDENTIFIER O_PAREN method_id_list C_PAREN block

   17 method_id_list: method_id_list COMMA type IDENTIFIER
   18               | type IDENTIFIER

   19 block: O_CUR_BRACE var_decls statements C_CUR_BRACE
   20      | O_CUR_BRACE statements C_CUR_BRACE
   21      | O_CUR_BRACE var_decls C_CUR_BRACE
   22      | O_CUR_BRACE C_CUR_BRACE

   23 var_decls: var_decls var_decl
   24          | var_decl

   25 var_decl: type ids SEMICOLON

   26 ids: ids COMMA IDENTIFIER
   27    | IDENTIFIER

   28 statements: statements statement
   29           | statement

   30 statement: block
   31          | location assign_op expr SEMICOLON
   32          | method_call SEMICOLON
   33          | IF O_PAREN expr C_PAREN block ELSE block
   34          | IF O_PAREN expr C_PAREN block
   35          | FOR IDENTIFIER EQUAL expr COMMA expr block
   36          | RETURN expr SEMICOLON
   37          | RETURN SEMICOLON
   38          | BREAK SEMICOLON
   39          | CONTINUE SEMICOLON

   40 assign_op: EQUAL
   41          | PLUS_EQUAL
   42          | MINUS_EQUAL

   43 location: IDENTIFIER
   44         | IDENTIFIER O_BRACE expr C_BRACE

   45 method_call: IDENTIFIER O_PAREN exprs C_PAREN
   46            | IDENTIFIER O_PAREN C_PAREN
   47            | CALLOUT O_PAREN STRING_LITERAL C_PAREN
   48            | CALLOUT O_PAREN STRING_LITERAL COMMA callout_args C_PAREN

   49 callout_args: callout_args COMMA callout_arg
   50             | callout_arg

   51 callout_arg: expr
   52            | STRING_LITERAL

   53 exprs: exprs COMMA expr
   54      | expr

   55 expr: location
   56     | method_call
   57     | literal
   58     | O_PAREN expr C_PAREN
   59     | expr OP_PLUS expr
   60     | expr OP_MINUS expr
   61     | expr OP_MULTIPLY expr
   62     | expr OP_DIVIDE expr
   63     | expr OP_MODULO expr
   64     | expr OP_LESS_THAN expr
   65     | expr OP_GREATER_THAN expr
   66     | expr OP_LESS_EQUAL expr
   67     | expr OP_GREATER_EQUAL expr
   68     | expr OP_EQUAL_EQUAL expr
   69     | expr OP_NOT_EQUAL expr
   70     | expr OP_LOGICAL_OR expr
   71     | expr OP_LOGICAL_AND expr
   72     | OP_NOT expr
   73     | OP_MINUS expr

   74 literal: INT_LITERAL
   75        | CHAR_LITERAL
   76        | TRUE
   77        | FALSE

   78 type: TYPE_INTEGER
   79     | TYPE_BOOLEAN


Terminals, with rules where they appear

$end (0) 0
error (256)
BREAK (258) 38
CALLOUT (259) 47 48
CLASS (260) 1 2 3 4
CONTINUE (261) 39
ELSE (262) 33
FALSE (263) 77
FOR (264) 35
IF (265) 33 34
RETURN (266) 36 37
TRUE (267) 76
VOID (268) 16
COMMA (269) 10 11 17 26 35 48 49 53
TYPE_BOOLEAN (270) 79
TYPE_INTEGER (271) 78
O_CUR_BRACE (272) 1 2 3 4 19 20 21 22
C_CUR_BRACE (273) 1 2 3 4 19 20 21 22
O_PAREN (274) 15 16 33 34 45 46 47 48 58
C_PAREN (275) 15 16 33 34 45 46 47 48 58
SEMICOLON (276) 9 25 31 32 36 37 38 39
O_BRACE (277) 14 44
C_BRACE (278) 14 44
OP_LOGICAL_OR (279) 70
OP_LOGICAL_AND (280) 71
EQUAL (281) 35 40
PLUS_EQUAL (282) 41
MINUS_EQUAL (283) 42
OP_NOT_EQUAL (284) 69
OP_EQUAL_EQUAL (285) 68
OP_LESS_THAN (286) 64
OP_GREATER_THAN (287) 65
OP_LESS_EQUAL (288) 66
OP_GREATER_EQUAL (289) 67
OP_PLUS (290) 59
OP_MINUS (291) 60 73
OP_MULTIPLY (292) 61
OP_DIVIDE (293) 62
OP_MODULO (294) 63
OP_NOT (295) 72
OP_UMINUS (296)
IDENTIFIER (297) 1 2 3 4 10 12 14 15 16 17 18 26 27 35 43 44 45 46
INT_LITERAL (298) 14 74
STRING_LITERAL (299) 47 48 52
CHAR_LITERAL (300) 75


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1 2 3 4, on right: 0
field_decls (48)
    on left: 5 6, on right: 1 2 5
method_decls (49)
    on left: 7 8, on right: 1 3 7
field_decl (50)
    on left: 9, on right: 5 6
id_all_list (51)
    on left: 10 11 12 13, on right: 9 10 11
id_array (52)
    on left: 14, on right: 11 13
method_decl (53)
    on left: 15 16, on right: 7 8
method_id_list (54)
    on left: 17 18, on right: 15 16 17
block (55)
    on left: 19 20 21 22, on right: 15 16 30 33 34 35
var_decls (56)
    on left: 23 24, on right: 19 21 23
var_decl (57)
    on left: 25, on right: 23 24
ids (58)
    on left: 26 27, on right: 25 26
statements (59)
    on left: 28 29, on right: 19 20 28
statement (60)
    on left: 30 31 32 33 34 35 36 37 38 39, on right: 28 29
assign_op (61)
    on left: 40 41 42, on right: 31
location (62)
    on left: 43 44, on right: 31 55
method_call (63)
    on left: 45 46 47 48, on right: 32 56
callout_args (64)
    on left: 49 50, on right: 48 49
callout_arg (65)
    on left: 51 52, on right: 49 50
exprs (66)
    on left: 53 54, on right: 45 53
expr (67)
    on left: 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
    73, on right: 31 33 34 35 36 44 51 53 54 58 59 60 61 62 63 64 65
    66 67 68 69 70 71 72 73
literal (68)
    on left: 74 75 76 77, on right: 57
type (69)
    on left: 78 79, on right: 9 15 17 18 25


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . IDENTIFIER O_CUR_BRACE field_decls method_decls C_CUR_BRACE
    2        | CLASS . IDENTIFIER O_CUR_BRACE field_decls C_CUR_BRACE
    3        | CLASS . IDENTIFIER O_CUR_BRACE method_decls C_CUR_BRACE
    4        | CLASS . IDENTIFIER O_CUR_BRACE C_CUR_BRACE

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS IDENTIFIER . O_CUR_BRACE field_decls method_decls C_CUR_BRACE
    2        | CLASS IDENTIFIER . O_CUR_BRACE field_decls C_CUR_BRACE
    3        | CLASS IDENTIFIER . O_CUR_BRACE method_decls C_CUR_BRACE
    4        | CLASS IDENTIFIER . O_CUR_BRACE C_CUR_BRACE

    O_CUR_BRACE  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS IDENTIFIER O_CUR_BRACE . field_decls method_decls C_CUR_BRACE
    2        | CLASS IDENTIFIER O_CUR_BRACE . field_decls C_CUR_BRACE
    3        | CLASS IDENTIFIER O_CUR_BRACE . method_decls C_CUR_BRACE
    4        | CLASS IDENTIFIER O_CUR_BRACE . C_CUR_BRACE

    VOID          shift, and go to state 6
    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8
    C_CUR_BRACE   shift, and go to state 9

    field_decls   go to state 10
    method_decls  go to state 11
    field_decl    go to state 12
    method_decl   go to state 13
    type          go to state 14


State 6

   16 method_decl: VOID . IDENTIFIER O_PAREN method_id_list C_PAREN block

    IDENTIFIER  shift, and go to state 15


State 7

   79 type: TYPE_BOOLEAN .

    $default  reduce using rule 79 (type)


State 8

   78 type: TYPE_INTEGER .

    $default  reduce using rule 78 (type)


State 9

    4 program: CLASS IDENTIFIER O_CUR_BRACE C_CUR_BRACE .

    $default  reduce using rule 4 (program)


State 10

    1 program: CLASS IDENTIFIER O_CUR_BRACE field_decls . method_decls C_CUR_BRACE
    2        | CLASS IDENTIFIER O_CUR_BRACE field_decls . C_CUR_BRACE
    5 field_decls: field_decls . field_decl

    VOID          shift, and go to state 6
    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8
    C_CUR_BRACE   shift, and go to state 16

    method_decls  go to state 17
    field_decl    go to state 18
    method_decl   go to state 13
    type          go to state 14


State 11

    3 program: CLASS IDENTIFIER O_CUR_BRACE method_decls . C_CUR_BRACE
    7 method_decls: method_decls . method_decl

    VOID          shift, and go to state 6
    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8
    C_CUR_BRACE   shift, and go to state 19

    method_decl  go to state 20
    type         go to state 21


State 12

    6 field_decls: field_decl .

    $default  reduce using rule 6 (field_decls)


State 13

    8 method_decls: method_decl .

    $default  reduce using rule 8 (method_decls)


State 14

    9 field_decl: type . id_all_list SEMICOLON
   15 method_decl: type . IDENTIFIER O_PAREN method_id_list C_PAREN block

    IDENTIFIER  shift, and go to state 22

    id_all_list  go to state 23
    id_array     go to state 24


State 15

   16 method_decl: VOID IDENTIFIER . O_PAREN method_id_list C_PAREN block

    O_PAREN  shift, and go to state 25


State 16

    2 program: CLASS IDENTIFIER O_CUR_BRACE field_decls C_CUR_BRACE .

    $default  reduce using rule 2 (program)


State 17

    1 program: CLASS IDENTIFIER O_CUR_BRACE field_decls method_decls . C_CUR_BRACE
    7 method_decls: method_decls . method_decl

    VOID          shift, and go to state 6
    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8
    C_CUR_BRACE   shift, and go to state 26

    method_decl  go to state 20
    type         go to state 21


State 18

    5 field_decls: field_decls field_decl .

    $default  reduce using rule 5 (field_decls)


State 19

    3 program: CLASS IDENTIFIER O_CUR_BRACE method_decls C_CUR_BRACE .

    $default  reduce using rule 3 (program)


State 20

    7 method_decls: method_decls method_decl .

    $default  reduce using rule 7 (method_decls)


State 21

   15 method_decl: type . IDENTIFIER O_PAREN method_id_list C_PAREN block

    IDENTIFIER  shift, and go to state 27


State 22

   12 id_all_list: IDENTIFIER .
   14 id_array: IDENTIFIER . O_BRACE INT_LITERAL C_BRACE
   15 method_decl: type IDENTIFIER . O_PAREN method_id_list C_PAREN block

    O_PAREN  shift, and go to state 28
    O_BRACE  shift, and go to state 29

    $default  reduce using rule 12 (id_all_list)


State 23

    9 field_decl: type id_all_list . SEMICOLON
   10 id_all_list: id_all_list . COMMA IDENTIFIER
   11            | id_all_list . COMMA id_array

    COMMA      shift, and go to state 30
    SEMICOLON  shift, and go to state 31


State 24

   13 id_all_list: id_array .

    $default  reduce using rule 13 (id_all_list)


State 25

   16 method_decl: VOID IDENTIFIER O_PAREN . method_id_list C_PAREN block

    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8

    method_id_list  go to state 32
    type            go to state 33


State 26

    1 program: CLASS IDENTIFIER O_CUR_BRACE field_decls method_decls C_CUR_BRACE .

    $default  reduce using rule 1 (program)


State 27

   15 method_decl: type IDENTIFIER . O_PAREN method_id_list C_PAREN block

    O_PAREN  shift, and go to state 28


State 28

   15 method_decl: type IDENTIFIER O_PAREN . method_id_list C_PAREN block

    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8

    method_id_list  go to state 34
    type            go to state 33


State 29

   14 id_array: IDENTIFIER O_BRACE . INT_LITERAL C_BRACE

    INT_LITERAL  shift, and go to state 35


State 30

   10 id_all_list: id_all_list COMMA . IDENTIFIER
   11            | id_all_list COMMA . id_array

    IDENTIFIER  shift, and go to state 36

    id_array  go to state 37


State 31

    9 field_decl: type id_all_list SEMICOLON .

    $default  reduce using rule 9 (field_decl)


State 32

   16 method_decl: VOID IDENTIFIER O_PAREN method_id_list . C_PAREN block
   17 method_id_list: method_id_list . COMMA type IDENTIFIER

    COMMA    shift, and go to state 38
    C_PAREN  shift, and go to state 39


State 33

   18 method_id_list: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 40


State 34

   15 method_decl: type IDENTIFIER O_PAREN method_id_list . C_PAREN block
   17 method_id_list: method_id_list . COMMA type IDENTIFIER

    COMMA    shift, and go to state 38
    C_PAREN  shift, and go to state 41


State 35

   14 id_array: IDENTIFIER O_BRACE INT_LITERAL . C_BRACE

    C_BRACE  shift, and go to state 42


State 36

   10 id_all_list: id_all_list COMMA IDENTIFIER .
   14 id_array: IDENTIFIER . O_BRACE INT_LITERAL C_BRACE

    O_BRACE  shift, and go to state 29

    $default  reduce using rule 10 (id_all_list)


State 37

   11 id_all_list: id_all_list COMMA id_array .

    $default  reduce using rule 11 (id_all_list)


State 38

   17 method_id_list: method_id_list COMMA . type IDENTIFIER

    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8

    type  go to state 43


State 39

   16 method_decl: VOID IDENTIFIER O_PAREN method_id_list C_PAREN . block

    O_CUR_BRACE  shift, and go to state 44

    block  go to state 45


State 40

   18 method_id_list: type IDENTIFIER .

    $default  reduce using rule 18 (method_id_list)


State 41

   15 method_decl: type IDENTIFIER O_PAREN method_id_list C_PAREN . block

    O_CUR_BRACE  shift, and go to state 44

    block  go to state 46


State 42

   14 id_array: IDENTIFIER O_BRACE INT_LITERAL C_BRACE .

    $default  reduce using rule 14 (id_array)


State 43

   17 method_id_list: method_id_list COMMA type . IDENTIFIER

    IDENTIFIER  shift, and go to state 47


State 44

   19 block: O_CUR_BRACE . var_decls statements C_CUR_BRACE
   20      | O_CUR_BRACE . statements C_CUR_BRACE
   21      | O_CUR_BRACE . var_decls C_CUR_BRACE
   22      | O_CUR_BRACE . C_CUR_BRACE

    BREAK         shift, and go to state 48
    CALLOUT       shift, and go to state 49
    CONTINUE      shift, and go to state 50
    FOR           shift, and go to state 51
    IF            shift, and go to state 52
    RETURN        shift, and go to state 53
    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8
    O_CUR_BRACE   shift, and go to state 44
    C_CUR_BRACE   shift, and go to state 54
    IDENTIFIER    shift, and go to state 55

    block        go to state 56
    var_decls    go to state 57
    var_decl     go to state 58
    statements   go to state 59
    statement    go to state 60
    location     go to state 61
    method_call  go to state 62
    type         go to state 63


State 45

   16 method_decl: VOID IDENTIFIER O_PAREN method_id_list C_PAREN block .

    $default  reduce using rule 16 (method_decl)


State 46

   15 method_decl: type IDENTIFIER O_PAREN method_id_list C_PAREN block .

    $default  reduce using rule 15 (method_decl)


State 47

   17 method_id_list: method_id_list COMMA type IDENTIFIER .

    $default  reduce using rule 17 (method_id_list)


State 48

   38 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 64


State 49

   47 method_call: CALLOUT . O_PAREN STRING_LITERAL C_PAREN
   48            | CALLOUT . O_PAREN STRING_LITERAL COMMA callout_args C_PAREN

    O_PAREN  shift, and go to state 65


State 50

   39 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 66


State 51

   35 statement: FOR . IDENTIFIER EQUAL expr COMMA expr block

    IDENTIFIER  shift, and go to state 67


State 52

   33 statement: IF . O_PAREN expr C_PAREN block ELSE block
   34          | IF . O_PAREN expr C_PAREN block

    O_PAREN  shift, and go to state 68


State 53

   36 statement: RETURN . expr SEMICOLON
   37          | RETURN . SEMICOLON

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    SEMICOLON     shift, and go to state 72
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 79
    literal      go to state 80


State 54

   22 block: O_CUR_BRACE C_CUR_BRACE .

    $default  reduce using rule 22 (block)


State 55

   43 location: IDENTIFIER .
   44         | IDENTIFIER . O_BRACE expr C_BRACE
   45 method_call: IDENTIFIER . O_PAREN exprs C_PAREN
   46            | IDENTIFIER . O_PAREN C_PAREN

    O_PAREN  shift, and go to state 81
    O_BRACE  shift, and go to state 82

    $default  reduce using rule 43 (location)


State 56

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 57

   19 block: O_CUR_BRACE var_decls . statements C_CUR_BRACE
   21      | O_CUR_BRACE var_decls . C_CUR_BRACE
   23 var_decls: var_decls . var_decl

    BREAK         shift, and go to state 48
    CALLOUT       shift, and go to state 49
    CONTINUE      shift, and go to state 50
    FOR           shift, and go to state 51
    IF            shift, and go to state 52
    RETURN        shift, and go to state 53
    TYPE_BOOLEAN  shift, and go to state 7
    TYPE_INTEGER  shift, and go to state 8
    O_CUR_BRACE   shift, and go to state 44
    C_CUR_BRACE   shift, and go to state 83
    IDENTIFIER    shift, and go to state 55

    block        go to state 56
    var_decl     go to state 84
    statements   go to state 85
    statement    go to state 60
    location     go to state 61
    method_call  go to state 62
    type         go to state 63


State 58

   24 var_decls: var_decl .

    $default  reduce using rule 24 (var_decls)


State 59

   20 block: O_CUR_BRACE statements . C_CUR_BRACE
   28 statements: statements . statement

    BREAK        shift, and go to state 48
    CALLOUT      shift, and go to state 49
    CONTINUE     shift, and go to state 50
    FOR          shift, and go to state 51
    IF           shift, and go to state 52
    RETURN       shift, and go to state 53
    O_CUR_BRACE  shift, and go to state 44
    C_CUR_BRACE  shift, and go to state 86
    IDENTIFIER   shift, and go to state 55

    block        go to state 56
    statement    go to state 87
    location     go to state 61
    method_call  go to state 62


State 60

   29 statements: statement .

    $default  reduce using rule 29 (statements)


State 61

   31 statement: location . assign_op expr SEMICOLON

    EQUAL        shift, and go to state 88
    PLUS_EQUAL   shift, and go to state 89
    MINUS_EQUAL  shift, and go to state 90

    assign_op  go to state 91


State 62

   32 statement: method_call . SEMICOLON

    SEMICOLON  shift, and go to state 92


State 63

   25 var_decl: type . ids SEMICOLON

    IDENTIFIER  shift, and go to state 93

    ids  go to state 94


State 64

   38 statement: BREAK SEMICOLON .

    $default  reduce using rule 38 (statement)


State 65

   47 method_call: CALLOUT O_PAREN . STRING_LITERAL C_PAREN
   48            | CALLOUT O_PAREN . STRING_LITERAL COMMA callout_args C_PAREN

    STRING_LITERAL  shift, and go to state 95


State 66

   39 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 39 (statement)


State 67

   35 statement: FOR IDENTIFIER . EQUAL expr COMMA expr block

    EQUAL  shift, and go to state 96


State 68

   33 statement: IF O_PAREN . expr C_PAREN block ELSE block
   34          | IF O_PAREN . expr C_PAREN block

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 97
    literal      go to state 80


State 69

   77 literal: FALSE .

    $default  reduce using rule 77 (literal)


State 70

   76 literal: TRUE .

    $default  reduce using rule 76 (literal)


State 71

   58 expr: O_PAREN . expr C_PAREN

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 98
    literal      go to state 80


State 72

   37 statement: RETURN SEMICOLON .

    $default  reduce using rule 37 (statement)


State 73

   73 expr: OP_MINUS . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 99
    literal      go to state 80


State 74

   72 expr: OP_NOT . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 100
    literal      go to state 80


State 75

   74 literal: INT_LITERAL .

    $default  reduce using rule 74 (literal)


State 76

   75 literal: CHAR_LITERAL .

    $default  reduce using rule 75 (literal)


State 77

   55 expr: location .

    $default  reduce using rule 55 (expr)


State 78

   56 expr: method_call .

    $default  reduce using rule 56 (expr)


State 79

   36 statement: RETURN expr . SEMICOLON
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    SEMICOLON         shift, and go to state 101
    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114


State 80

   57 expr: literal .

    $default  reduce using rule 57 (expr)


State 81

   45 method_call: IDENTIFIER O_PAREN . exprs C_PAREN
   46            | IDENTIFIER O_PAREN . C_PAREN

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    C_PAREN       shift, and go to state 115
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    exprs        go to state 116
    expr         go to state 117
    literal      go to state 80


State 82

   44 location: IDENTIFIER O_BRACE . expr C_BRACE

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 118
    literal      go to state 80


State 83

   21 block: O_CUR_BRACE var_decls C_CUR_BRACE .

    $default  reduce using rule 21 (block)


State 84

   23 var_decls: var_decls var_decl .

    $default  reduce using rule 23 (var_decls)


State 85

   19 block: O_CUR_BRACE var_decls statements . C_CUR_BRACE
   28 statements: statements . statement

    BREAK        shift, and go to state 48
    CALLOUT      shift, and go to state 49
    CONTINUE     shift, and go to state 50
    FOR          shift, and go to state 51
    IF           shift, and go to state 52
    RETURN       shift, and go to state 53
    O_CUR_BRACE  shift, and go to state 44
    C_CUR_BRACE  shift, and go to state 119
    IDENTIFIER   shift, and go to state 55

    block        go to state 56
    statement    go to state 87
    location     go to state 61
    method_call  go to state 62


State 86

   20 block: O_CUR_BRACE statements C_CUR_BRACE .

    $default  reduce using rule 20 (block)


State 87

   28 statements: statements statement .

    $default  reduce using rule 28 (statements)


State 88

   40 assign_op: EQUAL .

    $default  reduce using rule 40 (assign_op)


State 89

   41 assign_op: PLUS_EQUAL .

    $default  reduce using rule 41 (assign_op)


State 90

   42 assign_op: MINUS_EQUAL .

    $default  reduce using rule 42 (assign_op)


State 91

   31 statement: location assign_op . expr SEMICOLON

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 120
    literal      go to state 80


State 92

   32 statement: method_call SEMICOLON .

    $default  reduce using rule 32 (statement)


State 93

   27 ids: IDENTIFIER .

    $default  reduce using rule 27 (ids)


State 94

   25 var_decl: type ids . SEMICOLON
   26 ids: ids . COMMA IDENTIFIER

    COMMA      shift, and go to state 121
    SEMICOLON  shift, and go to state 122


State 95

   47 method_call: CALLOUT O_PAREN STRING_LITERAL . C_PAREN
   48            | CALLOUT O_PAREN STRING_LITERAL . COMMA callout_args C_PAREN

    COMMA    shift, and go to state 123
    C_PAREN  shift, and go to state 124


State 96

   35 statement: FOR IDENTIFIER EQUAL . expr COMMA expr block

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 125
    literal      go to state 80


State 97

   33 statement: IF O_PAREN expr . C_PAREN block ELSE block
   34          | IF O_PAREN expr . C_PAREN block
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    C_PAREN           shift, and go to state 126
    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114


State 98

   58 expr: O_PAREN expr . C_PAREN
   59     | expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    C_PAREN           shift, and go to state 127
    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114


State 99

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr
   73     | OP_MINUS expr .

    $default  reduce using rule 73 (expr)


State 100

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr
   72     | OP_NOT expr .

    $default  reduce using rule 72 (expr)


State 101

   36 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 36 (statement)


State 102

   70 expr: expr OP_LOGICAL_OR . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 128
    literal      go to state 80


State 103

   71 expr: expr OP_LOGICAL_AND . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 129
    literal      go to state 80


State 104

   69 expr: expr OP_NOT_EQUAL . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 130
    literal      go to state 80


State 105

   68 expr: expr OP_EQUAL_EQUAL . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 131
    literal      go to state 80


State 106

   64 expr: expr OP_LESS_THAN . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 132
    literal      go to state 80


State 107

   65 expr: expr OP_GREATER_THAN . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 133
    literal      go to state 80


State 108

   66 expr: expr OP_LESS_EQUAL . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 134
    literal      go to state 80


State 109

   67 expr: expr OP_GREATER_EQUAL . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 135
    literal      go to state 80


State 110

   59 expr: expr OP_PLUS . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 136
    literal      go to state 80


State 111

   60 expr: expr OP_MINUS . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 137
    literal      go to state 80


State 112

   61 expr: expr OP_MULTIPLY . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 138
    literal      go to state 80


State 113

   62 expr: expr OP_DIVIDE . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 139
    literal      go to state 80


State 114

   63 expr: expr OP_MODULO . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 140
    literal      go to state 80


State 115

   46 method_call: IDENTIFIER O_PAREN C_PAREN .

    $default  reduce using rule 46 (method_call)


State 116

   45 method_call: IDENTIFIER O_PAREN exprs . C_PAREN
   53 exprs: exprs . COMMA expr

    COMMA    shift, and go to state 141
    C_PAREN  shift, and go to state 142


State 117

   54 exprs: expr .
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    $default  reduce using rule 54 (exprs)


State 118

   44 location: IDENTIFIER O_BRACE expr . C_BRACE
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    C_BRACE           shift, and go to state 143
    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114


State 119

   19 block: O_CUR_BRACE var_decls statements C_CUR_BRACE .

    $default  reduce using rule 19 (block)


State 120

   31 statement: location assign_op expr . SEMICOLON
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    SEMICOLON         shift, and go to state 144
    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114


State 121

   26 ids: ids COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 145


State 122

   25 var_decl: type ids SEMICOLON .

    $default  reduce using rule 25 (var_decl)


State 123

   48 method_call: CALLOUT O_PAREN STRING_LITERAL COMMA . callout_args C_PAREN

    CALLOUT         shift, and go to state 49
    FALSE           shift, and go to state 69
    TRUE            shift, and go to state 70
    O_PAREN         shift, and go to state 71
    OP_MINUS        shift, and go to state 73
    OP_NOT          shift, and go to state 74
    IDENTIFIER      shift, and go to state 55
    INT_LITERAL     shift, and go to state 75
    STRING_LITERAL  shift, and go to state 146
    CHAR_LITERAL    shift, and go to state 76

    location      go to state 77
    method_call   go to state 78
    callout_args  go to state 147
    callout_arg   go to state 148
    expr          go to state 149
    literal       go to state 80


State 124

   47 method_call: CALLOUT O_PAREN STRING_LITERAL C_PAREN .

    $default  reduce using rule 47 (method_call)


State 125

   35 statement: FOR IDENTIFIER EQUAL expr . COMMA expr block
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    COMMA             shift, and go to state 150
    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114


State 126

   33 statement: IF O_PAREN expr C_PAREN . block ELSE block
   34          | IF O_PAREN expr C_PAREN . block

    O_CUR_BRACE  shift, and go to state 44

    block  go to state 151


State 127

   58 expr: O_PAREN expr C_PAREN .

    $default  reduce using rule 58 (expr)


State 128

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   70     | expr OP_LOGICAL_OR expr .
   71     | expr . OP_LOGICAL_AND expr

    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    $default  reduce using rule 70 (expr)


State 129

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr
   71     | expr OP_LOGICAL_AND expr .

    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    $default  reduce using rule 71 (expr)


State 130

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   69     | expr OP_NOT_EQUAL expr .
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    $default  reduce using rule 69 (expr)


State 131

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   68     | expr OP_EQUAL_EQUAL expr .
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    $default  reduce using rule 68 (expr)


State 132

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   64     | expr OP_LESS_THAN expr .
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_PLUS      shift, and go to state 110
    OP_MINUS     shift, and go to state 111
    OP_MULTIPLY  shift, and go to state 112
    OP_DIVIDE    shift, and go to state 113
    OP_MODULO    shift, and go to state 114

    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 64 (expr)


State 133

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   65     | expr OP_GREATER_THAN expr .
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_PLUS      shift, and go to state 110
    OP_MINUS     shift, and go to state 111
    OP_MULTIPLY  shift, and go to state 112
    OP_DIVIDE    shift, and go to state 113
    OP_MODULO    shift, and go to state 114

    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 65 (expr)


State 134

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   66     | expr OP_LESS_EQUAL expr .
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_PLUS      shift, and go to state 110
    OP_MINUS     shift, and go to state 111
    OP_MULTIPLY  shift, and go to state 112
    OP_DIVIDE    shift, and go to state 113
    OP_MODULO    shift, and go to state 114

    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 66 (expr)


State 135

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   67     | expr OP_GREATER_EQUAL expr .
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_PLUS      shift, and go to state 110
    OP_MINUS     shift, and go to state 111
    OP_MULTIPLY  shift, and go to state 112
    OP_DIVIDE    shift, and go to state 113
    OP_MODULO    shift, and go to state 114

    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 67 (expr)


State 136

   59 expr: expr . OP_PLUS expr
   59     | expr OP_PLUS expr .
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_MULTIPLY  shift, and go to state 112
    OP_DIVIDE    shift, and go to state 113
    OP_MODULO    shift, and go to state 114

    $default  reduce using rule 59 (expr)


State 137

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   60     | expr OP_MINUS expr .
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_MULTIPLY  shift, and go to state 112
    OP_DIVIDE    shift, and go to state 113
    OP_MODULO    shift, and go to state 114

    $default  reduce using rule 60 (expr)


State 138

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   61     | expr OP_MULTIPLY expr .
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    $default  reduce using rule 61 (expr)


State 139

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   62     | expr OP_DIVIDE expr .
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    $default  reduce using rule 62 (expr)


State 140

   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   63     | expr OP_MODULO expr .
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    $default  reduce using rule 63 (expr)


State 141

   53 exprs: exprs COMMA . expr

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 152
    literal      go to state 80


State 142

   45 method_call: IDENTIFIER O_PAREN exprs C_PAREN .

    $default  reduce using rule 45 (method_call)


State 143

   44 location: IDENTIFIER O_BRACE expr C_BRACE .

    $default  reduce using rule 44 (location)


State 144

   31 statement: location assign_op expr SEMICOLON .

    $default  reduce using rule 31 (statement)


State 145

   26 ids: ids COMMA IDENTIFIER .

    $default  reduce using rule 26 (ids)


State 146

   52 callout_arg: STRING_LITERAL .

    $default  reduce using rule 52 (callout_arg)


State 147

   48 method_call: CALLOUT O_PAREN STRING_LITERAL COMMA callout_args . C_PAREN
   49 callout_args: callout_args . COMMA callout_arg

    COMMA    shift, and go to state 153
    C_PAREN  shift, and go to state 154


State 148

   50 callout_args: callout_arg .

    $default  reduce using rule 50 (callout_args)


State 149

   51 callout_arg: expr .
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    $default  reduce using rule 51 (callout_arg)


State 150

   35 statement: FOR IDENTIFIER EQUAL expr COMMA . expr block

    CALLOUT       shift, and go to state 49
    FALSE         shift, and go to state 69
    TRUE          shift, and go to state 70
    O_PAREN       shift, and go to state 71
    OP_MINUS      shift, and go to state 73
    OP_NOT        shift, and go to state 74
    IDENTIFIER    shift, and go to state 55
    INT_LITERAL   shift, and go to state 75
    CHAR_LITERAL  shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    expr         go to state 155
    literal      go to state 80


State 151

   33 statement: IF O_PAREN expr C_PAREN block . ELSE block
   34          | IF O_PAREN expr C_PAREN block .

    ELSE  shift, and go to state 156

    $default  reduce using rule 34 (statement)


State 152

   53 exprs: exprs COMMA expr .
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    $default  reduce using rule 53 (exprs)


State 153

   49 callout_args: callout_args COMMA . callout_arg

    CALLOUT         shift, and go to state 49
    FALSE           shift, and go to state 69
    TRUE            shift, and go to state 70
    O_PAREN         shift, and go to state 71
    OP_MINUS        shift, and go to state 73
    OP_NOT          shift, and go to state 74
    IDENTIFIER      shift, and go to state 55
    INT_LITERAL     shift, and go to state 75
    STRING_LITERAL  shift, and go to state 146
    CHAR_LITERAL    shift, and go to state 76

    location     go to state 77
    method_call  go to state 78
    callout_arg  go to state 157
    expr         go to state 149
    literal      go to state 80


State 154

   48 method_call: CALLOUT O_PAREN STRING_LITERAL COMMA callout_args C_PAREN .

    $default  reduce using rule 48 (method_call)


State 155

   35 statement: FOR IDENTIFIER EQUAL expr COMMA expr . block
   59 expr: expr . OP_PLUS expr
   60     | expr . OP_MINUS expr
   61     | expr . OP_MULTIPLY expr
   62     | expr . OP_DIVIDE expr
   63     | expr . OP_MODULO expr
   64     | expr . OP_LESS_THAN expr
   65     | expr . OP_GREATER_THAN expr
   66     | expr . OP_LESS_EQUAL expr
   67     | expr . OP_GREATER_EQUAL expr
   68     | expr . OP_EQUAL_EQUAL expr
   69     | expr . OP_NOT_EQUAL expr
   70     | expr . OP_LOGICAL_OR expr
   71     | expr . OP_LOGICAL_AND expr

    O_CUR_BRACE       shift, and go to state 44
    OP_LOGICAL_OR     shift, and go to state 102
    OP_LOGICAL_AND    shift, and go to state 103
    OP_NOT_EQUAL      shift, and go to state 104
    OP_EQUAL_EQUAL    shift, and go to state 105
    OP_LESS_THAN      shift, and go to state 106
    OP_GREATER_THAN   shift, and go to state 107
    OP_LESS_EQUAL     shift, and go to state 108
    OP_GREATER_EQUAL  shift, and go to state 109
    OP_PLUS           shift, and go to state 110
    OP_MINUS          shift, and go to state 111
    OP_MULTIPLY       shift, and go to state 112
    OP_DIVIDE         shift, and go to state 113
    OP_MODULO         shift, and go to state 114

    block  go to state 158


State 156

   33 statement: IF O_PAREN expr C_PAREN block ELSE . block

    O_CUR_BRACE  shift, and go to state 44

    block  go to state 159


State 157

   49 callout_args: callout_args COMMA callout_arg .

    $default  reduce using rule 49 (callout_args)


State 158

   35 statement: FOR IDENTIFIER EQUAL expr COMMA expr block .

    $default  reduce using rule 35 (statement)


State 159

   33 statement: IF O_PAREN expr C_PAREN block ELSE block .

    $default  reduce using rule 33 (statement)
